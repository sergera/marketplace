version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    platform: linux/amd64
    container_name: cp-zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SYNC_LIMIT=5
    ports:
      - '2181:2181'

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    platform: linux/amd64
    container_name: cp-kafka
    restart: always
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://127.0.0.1:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'

  init-kafka:
    image: confluentinc/cp-kafka:7.2.1
    platform: linux/amd64
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic orders__unconfirmed --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic orders__in_progress --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic orders__ready --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic orders__in_transit --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic orders__delivered --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.2.1
  #   platform: linux/amd64
  #   container_name: cp-schema-registry
  #   environment:
  #     - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:29092
  #     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
  #     - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
  #     - SCHEMA_REGISTRY_DEBUG=true
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   ports:
  #     - '8081:8081'

  # rest-proxy:
  #   image: confluentinc/cp-kafka-rest:7.2.1
  #   platform: linux/amd64
  #   container_name: cp-kafka-rest-proxy
  #   environment:
  #     - KAFKA_REST_LISTENERS=http://rest-proxy:8082
  #     - KAFKA_REST_HOST_NAME=rest-proxy
  #     - KAFKA_REST_SCHEMA_REGISTRY_URL=schema-registry:8081
  #     - KAFKA_REST_BOOTSTRAP_SERVERS=kafka:29092
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - schema-registry
  #   ports:
  #     - '8082:8082'

  kafka-ui:
    image: provectuslabs/kafka-ui:5ff65e447215b7beb033945df0f95b719294998e
    container_name: kafka-ui
    platform: linux/amd64
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
      - SERVER_PORT=9090
    depends_on:
      - kafka
      - zookeeper
      # - schema-registry
    ports:
      - '9090:9090'

  # redpanda-console:
  #   image: docker.redpanda.com/vectorized/console:master-0a8fce8
  #   container_name: redpanda-console
  #   platform: linux/amd64
  #   environment:
  #     - KAFKA_BROKERS=kafka:29092
  #     - KAFKA_SCHEMAREGISTRY_ENABLED=true
  #     - KAFKA_SCHEMAREGISTRY_URLS=http://schema-registry:8081
  #     - KAFKA_TLS_ENABLED=false
  #     - KAFKA_SASL_ENABLED=false
  #     - SERVER_LISTENPORT=9091
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #     - schema-registry
  #   ports:
  #     - '9091:9091'
